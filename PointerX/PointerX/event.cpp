
#include <iostream>
#include <iomanip>
#include "event.h"

// –ü–æ–º–æ—â–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –≤—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ
Event createEventFromInput() {
    Event e;
    std::cout << "\n\tüóìÔ∏è –í—ä–≤–µ–¥–∏ –¥–∞—Ç–∞ (–Ω–∞–ø—Ä. 1876 –∏–ª–∏ 04.1876): ";
    std::getline(std::cin >> std::ws, e.date);

    std::cout << "\tüìö –í—ä–≤–µ–¥–∏ —Ç–µ–º–∞: ";
    std::getline(std::cin, e.topic);

    std::cout << "\tüìù –í—ä–≤–µ–¥–∏ –∑–∞–≥–ª–∞–≤–∏–µ: ";
    std::getline(std::cin, e.title);

    std::cout << "\tüìç –í—ä–≤–µ–¥–∏ –º—è—Å—Ç–æ: ";
    std::getline(std::cin, e.location);

    std::cout << "\tüë§ –í—ä–≤–µ–¥–∏ –ª–∏–¥–µ—Ä: ";
    std::getline(std::cin, e.leader);

    std::cout << "\tüë• –í—ä–≤–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏—Ü–∏\n";
    std::cout << "\t    üëâ –ü—Ä–∏–º–µ—Ä: –°—ä—é–∑–Ω–∏—Ü–∏: –†—É—Å–∏—è, –ë—ä–ª–≥–∞—Ä–∏—è | –ü—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏: –û—Å–º–∞–Ω—Å–∫–∞ –∏–º–ø–µ—Ä–∏—è\n";    
    std::cout << "\t    –£—á–∞—Å—Ç–Ω–∏—Ü–∏: ";
    std::getline(std::cin, e.participants);

    std::cout << "\tüèÅ –í—ä–≤–µ–¥–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç: ";
    std::getline(std::cin, e.outcome);

    return e;
}

// –°—Ä–∞–≤–Ω—è–≤–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∏ –∫–∞—Ç–æ —Å—Ç—Ä–∏–Ω–≥–æ–≤–µ
bool isDateBefore(const std::string& d1, const std::string& d2) {
    return d1 < d2;
}

// –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ –≤ —Å–ø–∏—Å—ä–∫–∞, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–æ –ø–æ –¥–∞—Ç–∞
void addEventSorted(Node*& head) {
    Event newEvent = createEventFromInput();
    Node* newNode = new Node{newEvent, nullptr};

    if (!head || isDateBefore(newEvent.date, head->data.date)) {
        newNode->next = head;
        head = newNode;
        return;
    }

    Node* current = head;
    while (current->next && isDateBefore(current->next->data.date, newEvent.date)) {
        current = current->next;
    }

    newNode->next = current->next;
    current->next = newNode;
}

// –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è (–∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ)
void printAllEvents(const Node* head) {
    const Node* current = head;
    while (current) {
        const Event& e = current->data;
        std::cout << "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        std::cout << "üóìÔ∏è –î–∞—Ç–∞: " << e.date << "\n";
        std::cout << "üìö –¢–µ–º–∞: " << e.topic << "\n";
        std::cout << "üìù –ó–∞–≥–ª–∞–≤–∏–µ: " << e.title << "\n";
        std::cout << "üìç –ú—è—Å—Ç–æ: " << e.location << "\n";
        std::cout << "üë§ –õ–∏–¥–µ—Ä: " << e.leader << "\n";
        std::cout << "ü§ù –£—á–∞—Å—Ç–Ω–∏—Ü–∏: " << e.participants << "\n";
        std::cout << "üèÅ –†–µ–∑—É–ª—Ç–∞—Ç: " << e.outcome << "\n";
        current = current->next;
    }
}

// –û—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–∞–º–µ—Ç—Ç–∞
void clearList(Node*& head) {
    while (head) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
}
